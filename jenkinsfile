node {
    def app

    stage('Clone repository') {
        checkout scm
    }

    stage('Update GIT') {
        script {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                withCredentials([usernamePassword(credentialsId: 'github', 
                                                   usernameVariable: 'GIT_USERNAME', 
                                                   passwordVariable: 'GIT_PASSWORD')]) {

                    // Set user config for Git
                    gitConfig("user.email", "hydar426@gmail.com")
                    gitConfig("user.name", "Hayder-alobaidi")

                    // Check if deployment.yaml file exists and update it
                    if (fileExists('mainfest/deployment.yaml')) {
                        def dockerTag = "${DOCKERTAG}"
                        def deploymentFile = readFile 'mainfest/deployment.yaml'
                        deploymentFile = deploymentFile.replaceAll(/hayder89\/web-app:.*/, "hayder89/web-app:${dockerTag}")
                        writeFile file: 'mainfest/deployment.yaml', text: deploymentFile

                        // Git operations: Add changes, commit, and push securely using the environment variables
                        sh 'git add .'
                        sh "git commit -m 'Done by Jenkins Job update mainfest: ${env.BUILD_NUMBER}'"
                        
                        // URL encode the email and password
                        def encodedUsername = URLEncoder.encode(GIT_USERNAME, "UTF-8")
                        def encodedPassword = URLEncoder.encode(GIT_PASSWORD, "UTF-8")
                        def gitUrl = "https://${encodedUsername}:${encodedPassword}@github.com/Hayder-alobaidi/P1-kubernetes_manifest.git"
                        
                        sh "git push ${gitUrl} HEAD:main"
                    } else {
                        echo 'File mainfest/deployment.yaml does not exist. Skipping update.'
                    }
                }
            }
        }
    }
}

def gitConfig(name, value) {
    sh "git config ${name} \"${value}\""
}
